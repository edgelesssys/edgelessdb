diff --git a/configure.cmake b/configure.cmake
index 4fc324a9..fc4af0ee 100644
--- a/configure.cmake
+++ b/configure.cmake
@@ -246,7 +246,7 @@ CHECK_INCLUDE_FILES (sys/param.h HAVE_SYS_PARAM_H)
 CHECK_INCLUDE_FILES (sys/vadvise.h HAVE_SYS_VADVISE_H)
 CHECK_INCLUDE_FILES (fnmatch.h HAVE_FNMATCH_H)
 CHECK_INCLUDE_FILES (stdarg.h  HAVE_STDARG_H)
-CHECK_INCLUDE_FILES ("stdlib.h;sys/un.h" HAVE_SYS_UN_H)
+SET(HAVE_SYS_UN_H 0) # EDG: disable unix socket
 CHECK_INCLUDE_FILES (wchar.h HAVE_WCHAR_H)
 CHECK_INCLUDE_FILES (wctype.h HAVE_WCTYPE_H)
 CHECK_INCLUDE_FILES (sys/sockio.h HAVE_SYS_SOCKIO_H)
diff --git a/include/my_rdtsc.h b/include/my_rdtsc.h
index 33d72276..f27f457d 100644
--- a/include/my_rdtsc.h
+++ b/include/my_rdtsc.h
@@ -23,20 +23,6 @@
 #ifndef MY_RDTSC_H
 #define MY_RDTSC_H
 
-# ifndef __has_builtin
-#  define __has_builtin(x) 0 /* Compatibility with non-clang compilers */
-# endif
-# if __has_builtin(__builtin_readcyclecounter)
-# elif defined _WIN32
-#  include <intrin.h>
-# elif defined __i386__ || defined __x86_64__
-#  include <x86intrin.h>
-# elif defined(__INTEL_COMPILER) && defined(__ia64__) && defined(HAVE_IA64INTRIN_H)
-#  include <ia64intrin.h>
-# elif defined(HAVE_SYS_TIMES_H) && defined(HAVE_GETHRTIME)
-#  include <sys/times.h>
-# endif
-
 /**
   Characteristics of a timer.
 */
@@ -128,57 +114,9 @@ C_MODE_START
 */
 static inline ulonglong my_timer_cycles(void)
 {
-# if __has_builtin(__builtin_readcyclecounter) && !defined (__aarch64__)
-  return __builtin_readcyclecounter();
-# elif defined _WIN32 || defined __i386__ || defined __x86_64__
-  return __rdtsc();
-# elif defined(__INTEL_COMPILER) && defined(__ia64__) && defined(HAVE_IA64INTRIN_H)
-  return (ulonglong) __getReg(_IA64_REG_AR_ITC); /* (3116) */
-#elif defined(__GNUC__) && defined(__ia64__)
-  {
-    ulonglong result;
-    __asm __volatile__ ("mov %0=ar.itc" : "=r" (result));
-    return result;
-  }
-#elif defined __GNUC__ && defined __powerpc__
-  return __builtin_ppc_get_timebase();
-#elif defined(__GNUC__) && defined(__sparcv9) && defined(_LP64)
-  {
-    ulonglong result;
-    __asm __volatile__ ("rd %%tick,%0" : "=r" (result));
-    return result;
-  }
-#elif defined(__GNUC__) && defined(__sparc__) && !defined(_LP64)
-  {
-      union {
-              ulonglong wholeresult;
-              struct {
-                      ulong high;
-                      ulong low;
-              }       splitresult;
-      } result;
-    __asm __volatile__ ("rd %%tick,%1; srlx %1,32,%0" : "=r" (result.splitresult.high), "=r" (result.splitresult.low));
-    return result.wholeresult;
-  }
-#elif defined(__GNUC__) && defined(__s390__)
-  /* covers both s390 and s390x */
-  {
-    ulonglong result;
-    __asm__ __volatile__ ("stck %0" : "=Q" (result) : : "cc");
-    return result;
-  }
-#elif defined(__GNUC__) && defined (__aarch64__)
-  {
-    ulonglong result;
-    __asm __volatile("mrs	%0, CNTVCT_EL0" : "=&r" (result));
-    return result;
-  }
-#elif defined(HAVE_SYS_TIMES_H) && defined(HAVE_GETHRTIME)
-  /* gethrtime may appear as either cycle or nanosecond counter */
-  return (ulonglong) gethrtime();
-#else
+  // EDG: RDTSC is not supported on SGX1, only on SGX2. So we fall back to
+  // the next timer here.
   return 0;
-#endif
 }
 
 /**
@@ -233,4 +171,3 @@ C_MODE_END
 #define MY_TIMER_ROUTINE_AARCH64                 29
 
 #endif
-
diff --git a/mysys/mysys_priv.h b/mysys/mysys_priv.h
index adf2d390..e4bef729 100644
--- a/mysys/mysys_priv.h
+++ b/mysys/mysys_priv.h
@@ -144,7 +144,10 @@ void my_error_unregister_all(void);
 #endif
 #endif
 
-#ifdef O_PATH
+// EDG: openat not supported, always use NOAT variant
+#if 1
+#define NOSYMLINK_FUNCTION_BODY(AT,NOAT) return NOAT;
+#elif 0
 #define HAVE_OPEN_PARENT_DIR_NOSYMLINKS
 const char *my_open_parent_dir_nosymlinks(const char *pathname, int *pdfd);
 #define NOSYMLINK_FUNCTION_BODY(AT,NOAT)                                \
diff --git a/sql/CMakeLists.txt b/sql/CMakeLists.txt
index b9cd418f..b680ffe0 100644
--- a/sql/CMakeLists.txt
+++ b/sql/CMakeLists.txt
@@ -195,7 +195,7 @@ RECOMPILE_FOR_EMBEDDED)
 MYSQL_ADD_PLUGIN(sql_sequence ha_sequence.cc STORAGE_ENGINE MANDATORY STATIC_ONLY
 RECOMPILE_FOR_EMBEDDED)
 
-ADD_LIBRARY(sql STATIC ${SQL_SOURCE})
+ADD_LIBRARY(sql STATIC ${SQL_SOURCE} ${EDBSRC}/mysqld_edb.cc)
 MAYBE_DISABLE_IPO(sql)
 DTRACE_INSTRUMENT(sql)
 TARGET_LINK_LIBRARIES(sql
diff --git a/sql/mysqld.cc b/sql/mysqld.cc
index 48a09d15..02e27aff 100644
--- a/sql/mysqld.cc
+++ b/sql/mysqld.cc
@@ -5483,7 +5483,6 @@ int mysqld_main(int argc, char **argv)
   if (init_server_components())
     unireg_abort(1);
 
-  init_ssl();
   network_init();
 
 #ifdef _WIN32
@@ -5510,14 +5509,27 @@ int mysqld_main(int argc, char **argv)
     init signals & alarm
     After this we can't quit by a simple unireg_abort
   */
-  start_signal_handler();				// Creates pidfile
+  (void)start_signal_handler; // EDG: signals not supported
 
-  if (mysql_rm_tmp_tables() || acl_init(opt_noacl) ||
+  if (mysql_rm_tmp_tables() || acl_init(true) ||
       my_tz_init((THD *)0, default_tz_name, opt_bootstrap))
     unireg_abort(1);
 
+  // EDG: listen on an internal socket for edb initialization before initializing ssl and acl
+  void edgeless_listen_internal();
+  edgeless_listen_internal();
+  init_ssl();
+
   if (!opt_noacl)
+  {
+    // EDG: do what acl_init(false) would have done
+    THD thd(0);
+    thd.thread_stack= reinterpret_cast<char*>(&thd);
+    thd.store_globals();
+    acl_reload(&thd);
+
     (void) grant_init();
+  }
 
   udf_init();
 
@@ -5573,6 +5585,11 @@ int mysqld_main(int argc, char **argv)
   if (opt_bootstrap)
   {
     select_thread_in_use= 0;                    // Allow 'kill' to work
+
+    // EDG: bootstrap from file instead of stdin
+    if (opt_init_file)
+      return read_init_file(opt_init_file) ? EXIT_FAILURE : EXIT_SUCCESS;
+
     int bootstrap_error= bootstrap(mysql_stdin);
     if (!abort_loop)
       unireg_abort(bootstrap_error);
diff --git a/storage/rocksdb/CMakeLists.txt b/storage/rocksdb/CMakeLists.txt
index c2fc8de8..cff5ac10 100644
--- a/storage/rocksdb/CMakeLists.txt
+++ b/storage/rocksdb/CMakeLists.txt
@@ -121,12 +121,12 @@ else()
   SET(ATOMIC_EXTRA_LIBS)
 endif()
 
-MYSQL_ADD_PLUGIN(rocksdb ${ROCKSDB_SE_SOURCES} MODULE_ONLY STORAGE_ENGINE
+MYSQL_ADD_PLUGIN(rocksdb_se ${ROCKSDB_SE_SOURCES} MANDATORY STORAGE_ENGINE
                  MODULE_OUTPUT_NAME ha_rocksdb
                  LINK_LIBRARIES ${ATOMIC_EXTRA_LIBS}
                  COMPONENT rocksdb-engine)
 
-IF(NOT TARGET rocksdb)
+IF(NOT TARGET rocksdb_se)
   # Bail out if compilation with rocksdb engine is not requested
   RETURN()
 ENDIF()
@@ -197,7 +197,7 @@ TARGET_LINK_LIBRARIES(rocksdb_aux_lib ${ATOMIC_EXTRA_LIBS})
 #ENDIF()
 
 
-TARGET_LINK_LIBRARIES(rocksdb rocksdb_aux_lib)
+TARGET_LINK_LIBRARIES(rocksdb_se rocksdb_aux_lib)
 
 CHECK_FUNCTION_EXISTS(sched_getcpu  HAVE_SCHED_GETCPU)
 IF(HAVE_SCHED_GETCPU)
