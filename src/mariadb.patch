diff --git a/configure.cmake b/configure.cmake
index 8383b6921f8..419881099ba 100644
--- a/configure.cmake
+++ b/configure.cmake
@@ -247,7 +247,7 @@ CHECK_INCLUDE_FILES (sys/param.h HAVE_SYS_PARAM_H)
 CHECK_INCLUDE_FILES (sys/vadvise.h HAVE_SYS_VADVISE_H)
 CHECK_INCLUDE_FILES (fnmatch.h HAVE_FNMATCH_H)
 CHECK_INCLUDE_FILES (stdarg.h  HAVE_STDARG_H)
-CHECK_INCLUDE_FILES ("stdlib.h;sys/un.h" HAVE_SYS_UN_H)
+SET(HAVE_SYS_UN_H 0) # EDG: disable unix socket
 CHECK_INCLUDE_FILES (wchar.h HAVE_WCHAR_H)
 CHECK_INCLUDE_FILES (wctype.h HAVE_WCTYPE_H)
 CHECK_INCLUDE_FILES (sys/sockio.h HAVE_SYS_SOCKIO_H)
diff --git a/include/my_rdtsc.h b/include/my_rdtsc.h
index 33d722764d4..b120d3920c0 100644
--- a/include/my_rdtsc.h
+++ b/include/my_rdtsc.h
@@ -128,7 +128,10 @@ C_MODE_START
 */
 static inline ulonglong my_timer_cycles(void)
 {
-# if __has_builtin(__builtin_readcyclecounter) && !defined (__aarch64__)
+  // EDG: RDTSC is not supported on SGX1. So we fall back to the next timer here.
+#if 1
+  return 0;
+#elif 0
   return __builtin_readcyclecounter();
 # elif defined _WIN32 || defined __i386__ || defined __x86_64__
   return __rdtsc();
diff --git a/mysys/mysys_priv.h b/mysys/mysys_priv.h
index adf2d39046a..e4bef7296e3 100644
--- a/mysys/mysys_priv.h
+++ b/mysys/mysys_priv.h
@@ -144,7 +144,10 @@ void my_error_unregister_all(void);
 #endif
 #endif
 
-#ifdef O_PATH
+// EDG: openat not supported, always use NOAT variant
+#if 1
+#define NOSYMLINK_FUNCTION_BODY(AT,NOAT) return NOAT;
+#elif 0
 #define HAVE_OPEN_PARENT_DIR_NOSYMLINKS
 const char *my_open_parent_dir_nosymlinks(const char *pathname, int *pdfd);
 #define NOSYMLINK_FUNCTION_BODY(AT,NOAT)                                \
diff --git a/sql/CMakeLists.txt b/sql/CMakeLists.txt
index bff01ca817e..72352999181 100644
--- a/sql/CMakeLists.txt
+++ b/sql/CMakeLists.txt
@@ -195,7 +195,7 @@ RECOMPILE_FOR_EMBEDDED)
 MYSQL_ADD_PLUGIN(sql_sequence ha_sequence.cc STORAGE_ENGINE MANDATORY STATIC_ONLY
 RECOMPILE_FOR_EMBEDDED)
 
-ADD_LIBRARY(sql STATIC ${SQL_SOURCE})
+ADD_LIBRARY(sql STATIC ${SQL_SOURCE} ${EDBDIR}/src/mysqld_edb.cc)
 MAYBE_DISABLE_IPO(sql)
 DTRACE_INSTRUMENT(sql)
 TARGET_LINK_LIBRARIES(sql
diff --git a/sql/mysqld.cc b/sql/mysqld.cc
index 29aaf389ca1..37cd48ee4fc 100644
--- a/sql/mysqld.cc
+++ b/sql/mysqld.cc
@@ -5478,7 +5478,6 @@ int mysqld_main(int argc, char **argv)
   if (init_server_components())
     unireg_abort(1);
 
-  init_ssl();
   network_init();
 
 #ifdef _WIN32
@@ -5505,14 +5504,27 @@ int mysqld_main(int argc, char **argv)
     init signals & alarm
     After this we can't quit by a simple unireg_abort
   */
-  start_signal_handler();				// Creates pidfile
+  (void)start_signal_handler; // EDG: signals not supported
 
-  if (mysql_rm_tmp_tables() || acl_init(opt_noacl) ||
+  if (mysql_rm_tmp_tables() || acl_init(true) ||
       my_tz_init((THD *)0, default_tz_name, opt_bootstrap))
     unireg_abort(1);
 
+  // EDG: listen on an internal socket for edb initialization before initializing ssl and acl
+  void edgeless_listen_internal();
+  edgeless_listen_internal();
+  init_ssl();
+
   if (!opt_noacl)
+  {
+    // EDG: do what acl_init(false) would have done
+    THD thd(0);
+    thd.thread_stack= reinterpret_cast<char*>(&thd);
+    thd.store_globals();
+    acl_reload(&thd);
+
     (void) grant_init();
+  }
 
   udf_init();
 
@@ -5568,6 +5580,11 @@ int mysqld_main(int argc, char **argv)
   if (opt_bootstrap)
   {
     select_thread_in_use= 0;                    // Allow 'kill' to work
+
+    // EDG: bootstrap from file instead of stdin
+    if (opt_init_file)
+      return read_init_file(opt_init_file) ? EXIT_FAILURE : EXIT_SUCCESS;
+
     int bootstrap_error= bootstrap(mysql_stdin);
     if (!abort_loop)
       unireg_abort(bootstrap_error);
diff --git a/storage/rocksdb/CMakeLists.txt b/storage/rocksdb/CMakeLists.txt
index c2fc8de8149..cff5ac101fa 100644
--- a/storage/rocksdb/CMakeLists.txt
+++ b/storage/rocksdb/CMakeLists.txt
@@ -121,12 +121,12 @@ else()
   SET(ATOMIC_EXTRA_LIBS)
 endif()
 
-MYSQL_ADD_PLUGIN(rocksdb ${ROCKSDB_SE_SOURCES} MODULE_ONLY STORAGE_ENGINE
+MYSQL_ADD_PLUGIN(rocksdb_se ${ROCKSDB_SE_SOURCES} MANDATORY STORAGE_ENGINE
                  MODULE_OUTPUT_NAME ha_rocksdb
                  LINK_LIBRARIES ${ATOMIC_EXTRA_LIBS}
                  COMPONENT rocksdb-engine)
 
-IF(NOT TARGET rocksdb)
+IF(NOT TARGET rocksdb_se)
   # Bail out if compilation with rocksdb engine is not requested
   RETURN()
 ENDIF()
@@ -197,7 +197,7 @@ TARGET_LINK_LIBRARIES(rocksdb_aux_lib ${ATOMIC_EXTRA_LIBS})
 #ENDIF()
 
 
-TARGET_LINK_LIBRARIES(rocksdb rocksdb_aux_lib)
+TARGET_LINK_LIBRARIES(rocksdb_se rocksdb_aux_lib)
 
 CHECK_FUNCTION_EXISTS(sched_getcpu  HAVE_SCHED_GETCPU)
 IF(HAVE_SCHED_GETCPU)
