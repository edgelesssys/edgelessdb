package core

import (
	"os"
)

// Config is an EDB config.
type Config struct {
	DataPath              string `json:",omitempty"`
	DatabaseAddress       string `json:",omitempty"`
	APIAddress            string `json:",omitempty"`
	CertificateCommonName string `json:",omitempty"`
	Debug                 bool   `json:",omitempty"`
	LogDir                string `json:",omitempty"`
}

// EnvDataPath is the name of the optional environment variable holding the data path for edb
const EnvDataPath = "EDG_EDB_DATA_PATH"

// EnvDatabaseAddress is the name of the optional environment variable holding the database address
const EnvDatabaseAddress = "EDG_EDB_DATABASE_ADDR"

// EnvAPIAddress is the name of the optional environment variable holding the API address
const EnvAPIAddress = "EDG_EDB_API_ADDR"

// EnvCertificateCommonName is the name of the optional environment variable holding the Common Name (CN) used for the certificate generated by edb
const EnvCertificateCommonName = "EDG_EDB_CERT_CN"

// EnvDebug is a flag to enable debug logging for edb
const EnvDebug = "EDG_EDB_DEBUG"

// EnvLogDir is the name of the optional environment variable holding the path for storing the log files
const EnvLogDir = "EDG_EDB_LOG_DIR"

// FillConfigFromEnvironment takes an existing config filled with defaults and replaces single values based on environment variables.
func FillConfigFromEnvironment(config Config) Config {
	envDataPath := os.Getenv(EnvDataPath)
	envDatabaseAddress := os.Getenv(EnvDatabaseAddress)
	envAPIAddress := os.Getenv(EnvAPIAddress)
	envCertCertificateCommonName := os.Getenv(EnvCertificateCommonName)
	envDebug := os.Getenv(EnvDebug)
	envLogDir := os.Getenv(EnvLogDir)

	if envDataPath != "" {
		config.DataPath = envDataPath
	}

	if envDatabaseAddress != "" {
		config.DatabaseAddress = envDatabaseAddress
	}

	if envAPIAddress != "" {
		config.APIAddress = envAPIAddress
	}

	if envCertCertificateCommonName != "" {
		config.CertificateCommonName = envCertCertificateCommonName
	}

	if envDebug != "" {
		config.Debug = true
	}

	if envLogDir != "" {
		config.LogDir = envLogDir
		config.Debug = true
	}

	return config
}
